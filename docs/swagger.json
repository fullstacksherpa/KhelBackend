{
    "swagger": "2.0",
    "info": {
        "description": "API for Khel, a complete sport application.",
        "title": "Khel API",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/app-reviews": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all app reviews from all users.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App_Reviews"
                ],
                "summary": "List All App Reviews",
                "responses": {
                    "200": {
                        "description": "List of all reviews",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.AppReview"
                            }
                        }
                    },
                    "401": {
                        "description": "unauthorized route",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows authenticated users to submit a rating and feedback for the app.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "App_Reviews"
                ],
                "summary": "Submit App Review",
                "parameters": [
                    {
                        "description": "Review payload",
                        "name": "review",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.AppReviewPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Review submitted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/authentication/refresh": {
            "post": {
                "description": "Validates the provided refresh token and issues new access and refresh tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Refresh authentication tokens",
                "parameters": [
                    {
                        "description": "Refresh token payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.RefreshPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New access and refresh tokens",
                        "schema": {
                            "$ref": "#/definitions/main.Envelope"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/authentication/reset-password": {
            "post": {
                "description": "Request password reset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Request password reset",
                "parameters": [
                    {
                        "description": "User email",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.RequestResetPasswordPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reset token sent",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "patch": {
                "description": "Reset password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Reset password",
                "parameters": [
                    {
                        "description": "Reset password details",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.ResetPasswordPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password reset successful",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/authentication/token": {
            "post": {
                "description": "Creates a token for a user after signin or login.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Login to get Token",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateUserTokenPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token to save at MMKV",
                        "schema": {
                            "$ref": "#/definitions/main.Envelope"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/authentication/user": {
            "post": {
                "description": "Registers a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Registers a user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.RegisterUserPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered",
                        "schema": {
                            "$ref": "#/definitions/main.UserWithToken"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/games/create": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new game with details such as sport type, venue, start time, and end time.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Create a new game",
                "parameters": [
                    {
                        "description": "Game details payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateGamePayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Game created successfully",
                        "schema": {
                            "$ref": "#/definitions/store.Game"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "409": {
                        "description": "Game overlaps with existing game",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/games/get-games": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a list of games based on filters such as sport type, game level, venue, booking status, location, time range, and status.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Retrieve a list of games",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Sport type to filter games (e.g., basketball)",
                        "name": "sport_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Game level (e.g., intermediate)",
                        "name": "game_level",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Venue ID to filter games",
                        "name": "venue_id",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter games based on booking status",
                        "name": "is_booked",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Game status: active, cancelled, completed",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "User latitude for location filtering",
                        "name": "lat",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "User longitude for location filtering",
                        "name": "lon",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Radius in kilometers for location-based filtering (0 for no filter)",
                        "name": "radius",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter games starting after this time (RFC3339 format)",
                        "name": "start_after",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter games ending before this time (RFC3339 format)",
                        "name": "end_before",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum price",
                        "name": "min_price",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum price",
                        "name": "max_price",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order, either 'asc' or 'desc'",
                        "name": "sort",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of games and GeoJSON features",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.GameSummary"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/games/get-upcoming": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a list of upcoming active games that the authenticated user has joined.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "List upcoming active games for the current user",
                "responses": {
                    "200": {
                        "description": "List of upcoming active games for user",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.GameSummary"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: missing or invalid API key",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error: could not retrieve upcoming games",
                        "schema": {}
                    }
                }
            }
        },
        "/games/shortlist": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a list of games that the authenticated user has shortlisted.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Shortlist_Games"
                ],
                "summary": "Retrieve shortlisted games for the authenticated user",
                "responses": {
                    "200": {
                        "description": "List of shortlisted games",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/store.ShortlistedGameDetail"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Unauthenticated request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error: Could not retrieve shortlist",
                        "schema": {}
                    }
                }
            }
        },
        "/games/{gameID}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns detailed information for a specific game including venue details and player images",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Get detailed game information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Game ID",
                        "name": "gameID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/store.GameDetails"
                        }
                    },
                    "400": {
                        "description": "Invalid game ID",
                        "schema": {}
                    },
                    "404": {
                        "description": "Game not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/games/{gameID}/accept": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Accepts a pending join request for a game by updating the request status to accepted and inserting the player into the game. The game ID is provided in the URL path and the user ID is provided in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Accept a join request for a game",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Game ID",
                        "name": "gameID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payload containing the user ID to accept",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "user_id": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message confirming the join request acceptance and player addition",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid game ID, payload error, or request is not in pending state",
                        "schema": {}
                    },
                    "404": {
                        "description": "Join request not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/games/{gameID}/assign-assistant/{playerID}": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows a game admin to assign the assistant role to a player for a specified game.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Assign an assistant role to a player",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Game ID",
                        "name": "gameID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Player ID to be assigned as assistant",
                        "name": "playerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Assistant role assigned successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid game ID, invalid player ID, or player not found/already an assistant",
                        "schema": {}
                    },
                    "403": {
                        "description": "Only game admins can assign assistants",
                        "schema": {}
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {}
                    }
                }
            }
        },
        "/games/{gameID}/cancel-game": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows an admin to cancel a game",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Cancel a game",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Game ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Game cancelled successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Game not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/games/{gameID}/players": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetches the list of players participating in a specific game. The game ID is provided in the URL path.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Retrieve players for a game",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Game ID",
                        "name": "gameID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of game players",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.PlayerResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid game ID",
                        "schema": {}
                    },
                    "404": {
                        "description": "Game players not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/games/{gameID}/qa": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all questions with replies for a game",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questions"
                ],
                "summary": "Get all Q\u0026A for a game",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Game ID",
                        "name": "gameID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.QuestionWithReplies"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    }
                }
            }
        },
        "/games/{gameID}/questions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all questions for a game",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questions"
                ],
                "summary": "Get game questions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Game ID",
                        "name": "gameID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.Question"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new question for a game",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questions"
                ],
                "summary": "Create a game question",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Game ID",
                        "name": "gameID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Question payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.QuestionPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/store.Question"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    }
                }
            }
        },
        "/games/{gameID}/questions/{questionID}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a question (only by author)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questions"
                ],
                "summary": "Delete a question",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Game ID",
                        "name": "gameID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Question ID",
                        "name": "questionID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    }
                }
            }
        },
        "/games/{gameID}/questions/{questionID}/replies": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a reply to a question (admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Questions"
                ],
                "summary": "Create a reply",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Game ID",
                        "name": "gameID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Question ID",
                        "name": "questionID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Reply payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.ReplyPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/store.Reply"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    }
                }
            }
        },
        "/games/{gameID}/reject": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Rejects a pending join request for a game. The game ID is specified in the URL path and the user ID is provided in the request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Reject a join request for a game",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Game ID",
                        "name": "gameID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Payload containing the user ID of the join request to reject",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "user_id": {
                                    "type": "integer"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message confirming the join request was rejected",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid game ID, payload error, or request is not pending",
                        "schema": {}
                    },
                    "404": {
                        "description": "Join request not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/games/{gameID}/request": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows a user to send a request to join a specific game. The game ID is provided in the URL path.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Send a request to join a game",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Game ID",
                        "name": "gameID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Join request submitted for approval",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid game ID",
                        "schema": {}
                    },
                    "404": {
                        "description": "Game not found or inactive",
                        "schema": {}
                    },
                    "409": {
                        "description": "Join request already sent",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/games/{gameID}/requests": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve all join requests for a specific game by game ID, including user details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Get all join requests for a game",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Game ID",
                        "name": "gameID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of join requests with user details",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.GameRequestWithUser"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid game ID",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/games/{gameID}/shortlist": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows authenticated users to add a game to their shortlist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Shortlist_Games"
                ],
                "summary": "Add a game to shortlist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Game ID",
                        "name": "gameID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Game added to shortlist",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid game ID or unauthenticated request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error: Could not add shortlist",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows authenticated users to remove a game from their shortlist.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Shortlist_Games"
                ],
                "summary": "Remove a game from shortlist",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Game ID",
                        "name": "gameID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Game removed from shortlist",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid game ID or unauthenticated request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error: Could not remove shortlist",
                        "schema": {}
                    }
                }
            }
        },
        "/games/{id}/toggle-match-full": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows an admin to toggle match full status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Toggle match full status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Game ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Match full status updated",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Game not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/games/{venueID}/upcoming": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a list of upcoming active games for the specified venue.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Retrieve upcoming active games at a venue",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of upcoming active games",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.GameSummary"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Missing or invalid venueID",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error: Could not retrieve upcoming games",
                        "schema": {}
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Healthcheck endpoint",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ops"
                ],
                "summary": "Healthcheckk",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update user information such as first name, last name, skill level, and phone number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user information",
                "parameters": [
                    {
                        "description": "Request body containing fields to update: first_name, last_name, skill_level, phone",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User info updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request, update values can't be nil",
                        "schema": {}
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/users/activate/{token}": {
            "put": {
                "description": "Activate a user account using an activation token provided in the URL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Activate user account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Activation token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User activated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/users/bookings": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns every booking made by the specified user, including venue details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List all bookings for a user",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number (1-based)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 50,
                        "minimum": 1,
                        "type": "integer",
                        "default": 7,
                        "description": "Items per page (max 50)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "confirmed",
                            "pending",
                            "rejected",
                            "done"
                        ],
                        "type": "string",
                        "description": "Filter by booking status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.UserBooking"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/users/logout": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "logout user which will nullify refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "logout user",
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve the authenticated user’s profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get current user profile",
                "responses": {
                    "200": {
                        "description": "Current user data",
                        "schema": {
                            "$ref": "#/definitions/store.User"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/users/profile-picture": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates a user's profile picture, saves the new URL in the database, and deletes the old one from Cloudinary",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update profile picture",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Profile picture file (max size: 2MB)",
                        "name": "profile_picture",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile picture updated successfully: \u003cURL\u003e",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Unable to parse form or retrieve file",
                        "schema": {}
                    },
                    "500": {
                        "description": "Failed to upload image to Cloudinary, update database, or delete old image",
                        "schema": {}
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Uploads a user's profile picture and saves the URL in the database",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Upload profile picture",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Profile picture file size limit is 2MB",
                        "name": "profile_picture",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile picture uploaded successfully: \u003cURL\u003e",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Unable to parse form or retrieve file",
                        "schema": {}
                    },
                    "500": {
                        "description": "Failed to upload image to Cloudinary or save URL in database",
                        "schema": {}
                    }
                }
            }
        },
        "/users/update-profile": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update any combination of first name, last name, phone, skill level, and/or profile picture in one call.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Edit current user’s profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "First name",
                        "name": "first_name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Last name",
                        "name": "last_name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Phone number (10 digits)",
                        "name": "phone",
                        "in": "formData"
                    },
                    {
                        "enum": [
                            "beginner",
                            "intermediate",
                            "advanced"
                        ],
                        "type": "string",
                        "description": "Skill level",
                        "name": "skill_level",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "JPEG or PNG image (max 5 MB)",
                        "name": "profile_picture",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Profile updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request (e.g. parse error, invalid field)",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/users/{userID}/follow": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Follows a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Follows a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User followed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "User payload missing",
                        "schema": {}
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {}
                    }
                }
            }
        },
        "/users/{userID}/unfollow": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Unfollow a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Unfollow a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User unfollowed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "User payload missing",
                        "schema": {}
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {}
                    }
                }
            }
        },
        "/venue/{id}": {
            "get": {
                "description": "Retrieve detailed information for a venue including aggregated review and game statistics.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue"
                ],
                "summary": "Get venue details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with venue details",
                        "schema": {
                            "$ref": "#/definitions/main.VenueDetailResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid venue id",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found: Venue not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/venues": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Register a new venue with details such as name, address, location, and amenities.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue-Owner"
                ],
                "summary": "Register a venue in our system",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Venue details (JSON string)",
                        "name": "venue",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "file"
                        },
                        "collectionFormat": "csv",
                        "description": "Venue images (up to 7 files)",
                        "name": "images",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Venue created successfully",
                        "schema": {
                            "$ref": "#/definitions/store.Venue"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/venues/favorites": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a list of venues that the authenticated user has marked as favorites.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Favorite_Venues"
                ],
                "summary": "Retrieve user's favorite venues",
                "responses": {
                    "200": {
                        "description": "List of favorite venues",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.Venue"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Unauthenticated request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error: Could not retrieve favorites",
                        "schema": {}
                    }
                }
            }
        },
        "/venues/is-venue-owner": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Determines whether the authenticated user owns at least one venue",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue-Owner"
                ],
                "summary": "Check if user is a venue owner",
                "responses": {
                    "200": {
                        "description": "Ownership check result",
                        "schema": {
                            "$ref": "#/definitions/main.isOwnerResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/venues/list-venues": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get paginated list of venues with filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue"
                ],
                "summary": "List venues",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by sport type",
                        "name": "sport",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Latitude for location filter",
                        "name": "lat",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Longitude for location filter",
                        "name": "lng",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Distance in meters from location",
                        "name": "distance",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 7,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.VenueListResponse"
                            }
                        }
                    }
                }
            }
        },
        "/venues/{venueID}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a venue by ID and removes all associated images from Cloudinary.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue-Owner"
                ],
                "summary": "Delete a venue from the system",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Venue deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid venue ID",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Venue not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows venue owners to update partial information about their venue.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue-Owner"
                ],
                "summary": "Update venue information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Venue update payload",
                        "name": "updateData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Venue updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error: Could not update venue",
                        "schema": {}
                    }
                }
            }
        },
        "/venues/{venueID}/available-times": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns one-hour buckets (with availability) for a given venue/day.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue"
                ],
                "summary": "List available time slots for a venue",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Date in YYYY-MM-DD format",
                        "name": "date",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hourly availability",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.HourlySlot"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/venues/{venueID}/bookings": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Books a venue for the specified time slot if available and calculates the total price based on the applicable pricing slot.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue"
                ],
                "summary": "Book a venue time slot",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Booking details payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.BookVenuePayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Booking created successfully",
                        "schema": {
                            "$ref": "#/definitions/store.Booking"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {}
                    },
                    "409": {
                        "description": "Conflict: Time slot is already booked",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error: Could not create booking",
                        "schema": {}
                    }
                }
            }
        },
        "/venues/{venueID}/favorite": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows authenticated users to add a venue to their favorites list.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Favorite_Venues"
                ],
                "summary": "Add a venue to favorites",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Venue added to favorites",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid venue ID or unauthenticated request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error: Could not add favorite",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows authenticated users to remove a venue from their favorites list.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Favorite_Venues"
                ],
                "summary": "Remove a venue from favorites",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Venue removed from favorites",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid venue ID or unauthenticated request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error: Could not remove favorite",
                        "schema": {}
                    }
                }
            }
        },
        "/venues/{venueID}/pending-bookings": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all bookings with status=\"pending\" for a given venue and date.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue-Owner"
                ],
                "summary": "List pending booking requests for a venue",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Date in YYYY-MM-DD format",
                        "name": "date",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pending bookings",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.PendingBooking"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/venues/{venueID}/pending-bookings/{bookingID}/accept": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Marks the booking with status=\"pending\" as \"confirmed\".",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue-Owner"
                ],
                "summary": "Accept a pending booking request",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Booking ID",
                        "name": "bookingID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/venues/{venueID}/pending-bookings/{bookingID}/reject": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Marks the booking with status=\"pending\" as \"rejected\".",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue-Owner"
                ],
                "summary": "Reject a pending booking request",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Booking ID",
                        "name": "bookingID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/venues/{venueID}/photos": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns a list of all image URLs associated with the specified venue.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue-Owner"
                ],
                "summary": "Retrieve all venue photo URLs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of image URLs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid venue ID",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Venue not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Uploads a new venue photo to Cloudinary and adds the new photo URL to the venue record.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue-Owner"
                ],
                "summary": "Upload a new photo for a venue",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Photo file to upload",
                        "name": "photo",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Photo uploaded successfully, returns {\\\"photo_url\\\": \\\"\u003cnewPhotoURL\u003e\\\"}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input or missing file",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error: Could not process the upload",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a specific venue photo from Cloudinary and removes it from the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue-Owner"
                ],
                "summary": "Delete a venue photo",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Photo URL to delete",
                        "name": "photo_url",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Photo deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Missing venue ID or photo URL",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error: Could not delete photo",
                        "schema": {}
                    }
                }
            }
        },
        "/venues/{venueID}/pricing": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all pricing slots for the specified venue. If the optional `day` query parameter is provided (e.g., `?day=monday`), only slots for that day will be returned.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue-Owner"
                ],
                "summary": "Retrieve pricing slots for a venue (optionally filtered by day)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Day of week (sunday, monday, tuesday, wednesday, thursday, friday, saturday)",
                        "name": "day",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of pricing slots",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.PricingSlot"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Adds new day/time price rules to venue_pricing in bulk",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue-Owner"
                ],
                "summary": "Create one or more pricing slots for a venue",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Pricing slots",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.BulkCreatePricingPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Pricing slots created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.PricingSlot"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/venues/{venueID}/pricing/{pricingID}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows venue owners to update the pricing information (day, time range, and price) for a specific pricing slot.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue-Owner"
                ],
                "summary": "Update a pricing slot for a venue",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Pricing Slot ID",
                        "name": "pricingID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Pricing update payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.UpdatePricingPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pricing updated successfully",
                        "schema": {
                            "$ref": "#/definitions/store.PricingSlot"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error: Could not update pricing",
                        "schema": {}
                    }
                }
            }
        },
        "/venues/{venueID}/reviews": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves all reviews for a specific venue along with the total count and average rating.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue"
                ],
                "summary": "Retrieve reviews for a venue",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reviews, total review count, and average rating",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid venue ID",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new review for a specific venue. The review includes a rating and comment.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue"
                ],
                "summary": "Create a review for a venue",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Review payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.createReviewPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Review created successfully",
                        "schema": {
                            "$ref": "#/definitions/store.Review"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/venues/{venueID}/reviews/{reviewID}": {
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a review for a venue. This operation is allowed only if the requester is the review owner.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue"
                ],
                "summary": "Delete a venue review",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Review ID",
                        "name": "reviewID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Review deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid review ID",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found: Review not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/venues/{venueID}/scheduled-bookings": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Returns all bookings with status=\"confirmed\" for a given venue and date.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue-Owner"
                ],
                "summary": "List Scheduled booking requests for a venue",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Date in YYYY-MM-DD format",
                        "name": "date",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Scheduled bookings",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/store.ScheduledBooking"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/venues/{venueID}/venue-info": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves detailed information (name, address, description, status, etc.) about a venue by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Venue-Owner"
                ],
                "summary": "Get venue information",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Venue ID",
                        "name": "venueID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed venue information",
                        "schema": {
                            "$ref": "#/definitions/store.VenueInfo"
                        }
                    },
                    "400": {
                        "description": "Invalid venue ID",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Venue not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        }
    },
    "definitions": {
        "main.AppReviewPayload": {
            "type": "object",
            "properties": {
                "feedback": {
                    "type": "string"
                },
                "rating": {
                    "type": "integer"
                }
            }
        },
        "main.BookVenuePayload": {
            "type": "object",
            "required": [
                "end_time",
                "start_time"
            ],
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "main.BulkCreatePricingPayload": {
            "type": "object",
            "required": [
                "slots"
            ],
            "properties": {
                "slots": {
                    "description": "we use dive, required to ensure each item inside the array is individually validated.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/main.CreatePricingPayload"
                    }
                }
            }
        },
        "main.CreateGamePayload": {
            "type": "object",
            "required": [
                "end_time",
                "max_players",
                "sport_type",
                "start_time",
                "venue_id",
                "visibility"
            ],
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "format": {
                    "type": "string",
                    "maxLength": 20
                },
                "game_level": {
                    "type": "string",
                    "enum": [
                        "beginner",
                        "intermediate",
                        "advanced"
                    ]
                },
                "instruction": {
                    "type": "string",
                    "maxLength": 500
                },
                "max_players": {
                    "type": "integer",
                    "minimum": 1
                },
                "price": {
                    "type": "integer",
                    "minimum": 0
                },
                "sport_type": {
                    "type": "string",
                    "enum": [
                        "futsal",
                        "basketball",
                        "badminton",
                        "e-sport",
                        "cricket",
                        "tennis"
                    ]
                },
                "start_time": {
                    "type": "string"
                },
                "venue_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "visibility": {
                    "type": "string",
                    "enum": [
                        "public",
                        "private"
                    ]
                }
            }
        },
        "main.CreatePricingPayload": {
            "type": "object",
            "required": [
                "day_of_week",
                "end_time",
                "price",
                "start_time"
            ],
            "properties": {
                "day_of_week": {
                    "type": "string",
                    "enum": [
                        "sunday",
                        "monday",
                        "tuesday",
                        "wednesday",
                        "thursday",
                        "friday",
                        "saturday"
                    ]
                },
                "end_time": {
                    "description": "format \"15:04:05\"",
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "start_time": {
                    "description": "format \"15:04:05\"",
                    "type": "string"
                }
            }
        },
        "main.CreateUserTokenPayload": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 3
                }
            }
        },
        "main.Envelope": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/main.TokenResponse"
                }
            }
        },
        "main.HourlySlot": {
            "type": "object",
            "properties": {
                "available": {
                    "type": "boolean"
                },
                "end_time": {
                    "type": "string"
                },
                "price_per_hour": {
                    "type": "integer"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "main.PlayerResponse": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "phone": {
                    "type": "string"
                },
                "profile_picture_url": {
                    "type": "string"
                },
                "skill_level": {
                    "type": "string"
                }
            }
        },
        "main.QuestionPayload": {
            "type": "object",
            "required": [
                "question"
            ],
            "properties": {
                "question": {
                    "type": "string",
                    "maxLength": 120
                }
            }
        },
        "main.RefreshPayload": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "main.RegisterUserPayload": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password",
                "phone"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 3
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "main.ReplyPayload": {
            "type": "object",
            "required": [
                "reply"
            ],
            "properties": {
                "reply": {
                    "type": "string",
                    "maxLength": 120
                }
            }
        },
        "main.RequestResetPasswordPayload": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "main.ResetPasswordPayload": {
            "type": "object",
            "required": [
                "password",
                "token"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 3
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "main.TokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "main.UpdatePricingPayload": {
            "type": "object",
            "properties": {
                "day_of_week": {
                    "type": "string"
                },
                "end_time": {
                    "description": "Format \"15:04:05\"",
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "start_time": {
                    "description": "Format \"15:04:05\"",
                    "type": "string"
                }
            }
        },
        "main.UserWithToken": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/store.User"
                }
            }
        },
        "main.VenueDetailResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "amenities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "average_rating": {
                    "type": "number"
                },
                "completed_games": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image_urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "location": {
                    "description": "[latitude, longitude]",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "name": {
                    "type": "string"
                },
                "open_time": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "integer"
                },
                "phone_number": {
                    "type": "string"
                },
                "sport": {
                    "type": "string"
                },
                "total_reviews": {
                    "type": "integer"
                },
                "upcoming_games": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "main.VenueListResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "average_rating": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "image_urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_favorite": {
                    "type": "boolean"
                },
                "location": {
                    "description": "[longitude, latitude]",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "name": {
                    "type": "string"
                },
                "open_time": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "sport": {
                    "type": "string"
                },
                "total_reviews": {
                    "type": "integer"
                }
            }
        },
        "main.createReviewPayload": {
            "type": "object",
            "required": [
                "comment",
                "rating"
            ],
            "properties": {
                "comment": {
                    "type": "string",
                    "maxLength": 500
                },
                "rating": {
                    "type": "integer",
                    "maximum": 5,
                    "minimum": 1
                }
            }
        },
        "main.isOwnerResponse": {
            "type": "object",
            "properties": {
                "is_owner": {
                    "type": "boolean"
                },
                "venue_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "store.AppReview": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "feedback": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "rating": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "store.Booking": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "total_price": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                },
                "venue_id": {
                    "type": "integer"
                }
            }
        },
        "store.Game": {
            "type": "object",
            "properties": {
                "admin_id": {
                    "description": "Foreign key to users table (game admin)",
                    "type": "integer"
                },
                "created_at": {
                    "description": "Timestamp when the game was created",
                    "type": "string"
                },
                "end_time": {
                    "description": "Game end time",
                    "type": "string"
                },
                "format": {
                    "description": "Game format (nullable)",
                    "type": "string"
                },
                "game_level": {
                    "description": "Skill level (beginner, intermediate, advanced)",
                    "type": "string"
                },
                "id": {
                    "description": "Primary key",
                    "type": "integer"
                },
                "instruction": {
                    "description": "Game instructions (nullable)",
                    "type": "string"
                },
                "is_booked": {
                    "description": "Whether the game is booked",
                    "type": "boolean"
                },
                "match_full": {
                    "description": "Whether the game is full",
                    "type": "boolean"
                },
                "max_players": {
                    "description": "Maximum number of players",
                    "type": "integer"
                },
                "price": {
                    "description": "Price of the game (nullable)",
                    "type": "integer"
                },
                "sport_type": {
                    "description": "Type of sport (e.g., futsal, basketball)",
                    "type": "string"
                },
                "start_time": {
                    "description": "Game start time",
                    "type": "string"
                },
                "status": {
                    "description": "Game status (active, cancelled, completed)",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Timestamp when the game was last updated",
                    "type": "string"
                },
                "venue_id": {
                    "description": "Foreign key to venues table",
                    "type": "integer"
                },
                "visibility": {
                    "description": "Visibility (public or private)",
                    "type": "string"
                }
            }
        },
        "store.GameDetails": {
            "type": "object",
            "properties": {
                "admin_id": {
                    "type": "integer"
                },
                "current_player": {
                    "type": "integer"
                },
                "end_time": {
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "game_admin_name": {
                    "type": "string"
                },
                "game_id": {
                    "type": "integer"
                },
                "game_level": {
                    "type": "string"
                },
                "is_booked": {
                    "type": "boolean"
                },
                "match_full": {
                    "type": "boolean"
                },
                "max_players": {
                    "type": "integer"
                },
                "player_ids": {
                    "description": "all joined player user IDs",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "player_images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "price": {
                    "type": "integer"
                },
                "requested_player_ids": {
                    "description": "pending request user IDs",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "sport_type": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "venue_id": {
                    "type": "integer"
                },
                "venue_lat": {
                    "type": "number"
                },
                "venue_lon": {
                    "type": "number"
                },
                "venue_name": {
                    "type": "string"
                }
            }
        },
        "store.GameRequestStatus": {
            "type": "string",
            "enum": [
                "pending",
                "accepted",
                "rejected"
            ],
            "x-enum-varnames": [
                "GameRequestStatusPending",
                "GameRequestStatusAccepted",
                "GameRequestStatusRejected"
            ]
        },
        "store.GameRequestWithUser": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "game_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "phone": {
                    "type": "string"
                },
                "profile_picture_url": {
                    "type": "string"
                },
                "request_time": {
                    "type": "string"
                },
                "skill_level": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/store.GameRequestStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "store.GameSummary": {
            "type": "object",
            "properties": {
                "current_player": {
                    "type": "integer"
                },
                "end_time": {
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "game_admin_name": {
                    "type": "string"
                },
                "game_id": {
                    "type": "integer"
                },
                "game_level": {
                    "type": "string"
                },
                "is_booked": {
                    "type": "boolean"
                },
                "match_full": {
                    "type": "boolean"
                },
                "max_players": {
                    "type": "integer"
                },
                "player_images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "price": {
                    "type": "integer"
                },
                "shortlisted": {
                    "type": "boolean"
                },
                "sport_type": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "venue_id": {
                    "type": "integer"
                },
                "venue_lat": {
                    "description": "Venue latitude",
                    "type": "number"
                },
                "venue_lon": {
                    "description": "Venue longitude",
                    "type": "number"
                },
                "venue_name": {
                    "type": "string"
                }
            }
        },
        "store.PendingBooking": {
            "type": "object",
            "properties": {
                "booking_id": {
                    "type": "integer"
                },
                "end_time": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "requested_at": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                },
                "user_image": {
                    "description": "nullable",
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                },
                "user_number": {
                    "type": "string"
                }
            }
        },
        "store.PricingSlot": {
            "type": "object",
            "properties": {
                "dayOfWeek": {
                    "type": "string"
                },
                "endTime": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "price": {
                    "type": "integer"
                },
                "startTime": {
                    "description": "Note: start_time and end_time are stored as TIME in the DB.\nWe use time.Time to hold the time part.",
                    "type": "string"
                },
                "venueID": {
                    "type": "integer"
                }
            }
        },
        "store.Question": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "game_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "question": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "store.QuestionWithReplies": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "question": {
                    "type": "string"
                },
                "replies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/store.Reply"
                    }
                }
            }
        },
        "store.Reply": {
            "type": "object",
            "properties": {
                "admin_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "question_id": {
                    "type": "integer"
                },
                "reply": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "store.Review": {
            "type": "object",
            "properties": {
                "avatar_url": {
                    "type": "string"
                },
                "comment": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "rating": {
                    "description": "1-5",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                },
                "user_name": {
                    "description": "Joined fields",
                    "type": "string"
                },
                "venue_id": {
                    "type": "integer"
                }
            }
        },
        "store.ScheduledBooking": {
            "type": "object",
            "properties": {
                "accepted_at": {
                    "type": "string"
                },
                "booking_id": {
                    "type": "integer"
                },
                "end_time": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "start_time": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                },
                "user_image": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                },
                "user_number": {
                    "type": "string"
                }
            }
        },
        "store.ShortlistedGameDetail": {
            "type": "object",
            "properties": {
                "admin_id": {
                    "description": "Foreign key to users table (game admin)",
                    "type": "integer"
                },
                "created_at": {
                    "description": "Timestamp when the game was created",
                    "type": "string"
                },
                "end_time": {
                    "description": "Game end time",
                    "type": "string"
                },
                "format": {
                    "description": "Game format (nullable)",
                    "type": "string"
                },
                "game_level": {
                    "description": "Skill level (beginner, intermediate, advanced)",
                    "type": "string"
                },
                "id": {
                    "description": "Primary key",
                    "type": "integer"
                },
                "instruction": {
                    "description": "Game instructions (nullable)",
                    "type": "string"
                },
                "is_booked": {
                    "description": "Whether the game is booked",
                    "type": "boolean"
                },
                "match_full": {
                    "description": "Whether the game is full",
                    "type": "boolean"
                },
                "max_players": {
                    "description": "Maximum number of players",
                    "type": "integer"
                },
                "price": {
                    "description": "Price of the game (nullable)",
                    "type": "integer"
                },
                "sport_type": {
                    "description": "Type of sport (e.g., futsal, basketball)",
                    "type": "string"
                },
                "start_time": {
                    "description": "Game start time",
                    "type": "string"
                },
                "status": {
                    "description": "Game status (active, cancelled, completed)",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Timestamp when the game was last updated",
                    "type": "string"
                },
                "venue_address": {
                    "type": "string"
                },
                "venue_id": {
                    "description": "Foreign key to venues table",
                    "type": "integer"
                },
                "venue_name": {
                    "type": "string"
                },
                "visibility": {
                    "description": "Visibility (public or private)",
                    "type": "string"
                }
            }
        },
        "store.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_name": {
                    "type": "string"
                },
                "no_of_games": {
                    "type": "integer"
                },
                "phone": {
                    "type": "string"
                },
                "profile_picture_url": {
                    "type": "string"
                },
                "skill_level": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "store.UserBooking": {
            "type": "object",
            "properties": {
                "booking_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "total_price": {
                    "type": "integer"
                },
                "venue_address": {
                    "type": "string"
                },
                "venue_id": {
                    "type": "integer"
                },
                "venue_name": {
                    "type": "string"
                }
            }
        },
        "store.Venue": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "amenities": {
                    "description": "Array of strings",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image_urls": {
                    "description": "Array of image URLs",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "location": {
                    "description": "PostGIS point (longitude, latitude)",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "name": {
                    "type": "string"
                },
                "open_time": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "integer"
                },
                "phone_number": {
                    "type": "string"
                },
                "sport": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "store.VenueInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "amenities": {
                    "description": "Array of strings",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "description": "PostGIS point (longitude, latitude)",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "name": {
                    "type": "string"
                },
                "open_time": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}