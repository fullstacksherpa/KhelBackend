// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/authentication/refresh": {
            "post": {
                "description": "Validates the provided refresh token and issues new access and refresh tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Refresh authentication tokens",
                "parameters": [
                    {
                        "description": "Refresh token payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.RefreshPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New access and refresh tokens",
                        "schema": {
                            "$ref": "#/definitions/main.Envelope"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/authentication/token": {
            "post": {
                "description": "Creates a token for a user after signin or login.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Creates a token",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateUserTokenPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token to save at MMKV",
                        "schema": {
                            "$ref": "#/definitions/main.Envelope"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/authentication/user": {
            "post": {
                "description": "Registers a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Registers a user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.RegisterUserPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered",
                        "schema": {
                            "$ref": "#/definitions/main.UserWithToken"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/games": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new game with details such as sport type, venue, start time, and end time.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Games"
                ],
                "summary": "Create a new game",
                "parameters": [
                    {
                        "description": "Game details payload",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.CreateGamePayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Game created successfully",
                        "schema": {
                            "$ref": "#/definitions/store.Game"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "409": {
                        "description": "Game overlaps with existing game",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Healthcheck endpoint",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ops"
                ],
                "summary": "Healthcheckk",
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users": {
            "put": {
                "description": "Update user information such as first name, last name, skill level, and phone number",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update user information",
                "parameters": [
                    {
                        "description": "Field name should be \tfirst_name,  last_name, skill_level, phone whichever who want to update",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User info updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request, update values can't be nil",
                        "schema": {}
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/users/activate/{token}": {
            "put": {
                "description": "Activate a user account using an activation token provided in the URL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Activate user account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Activation token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User activated",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/users/logout": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "logout user which will nullify refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "logout user",
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/users/profile-picture": {
            "put": {
                "description": "Updates a user's profile picture, saves the new URL in the database, and deletes the old one from Cloudinary",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update profile picture",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Profile picture file (max size: 2MB)",
                        "name": "profile_picture",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile picture updated successfully: \u003cURL\u003e",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Unable to parse form or retrieve file",
                        "schema": {}
                    },
                    "500": {
                        "description": "Failed to upload image to Cloudinary, update database, or delete old image",
                        "schema": {}
                    }
                }
            },
            "post": {
                "description": "Uploads a user's profile picture and saves the URL in the database",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Upload profile picture",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Profile picture file size limit is 2MB",
                        "name": "profile_picture",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile picture uploaded successfully: \u003cURL\u003e",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Unable to parse form or retrieve file",
                        "schema": {}
                    },
                    "500": {
                        "description": "Failed to upload image to Cloudinary or save URL in database",
                        "schema": {}
                    }
                }
            }
        },
        "/users/{userID}/follow": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Follows a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Follows a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User followed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "User payload missing",
                        "schema": {}
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {}
                    }
                }
            }
        },
        "/users/{userID}/unfollow": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Unfollow a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Unfollow a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User unfollowed",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "User payload missing",
                        "schema": {}
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {}
                    }
                }
            }
        }
    },
    "definitions": {
        "main.CreateGamePayload": {
            "type": "object",
            "required": [
                "end_time",
                "max_players",
                "sport_type",
                "start_time",
                "venue_id",
                "visibility"
            ],
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "format": {
                    "type": "string",
                    "maxLength": 20
                },
                "game_level": {
                    "type": "string",
                    "enum": [
                        "beginner",
                        "intermediate",
                        "advanced"
                    ]
                },
                "instruction": {
                    "type": "string",
                    "maxLength": 500
                },
                "max_players": {
                    "type": "integer",
                    "minimum": 1
                },
                "price": {
                    "type": "integer",
                    "minimum": 0
                },
                "sport_type": {
                    "type": "string",
                    "enum": [
                        "futsal",
                        "basketball",
                        "badminton",
                        "e-sport",
                        "cricket",
                        "tennis"
                    ]
                },
                "start_time": {
                    "type": "string"
                },
                "venue_id": {
                    "type": "integer",
                    "minimum": 1
                },
                "visibility": {
                    "type": "string",
                    "enum": [
                        "public",
                        "private"
                    ]
                }
            }
        },
        "main.CreateUserTokenPayload": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 3
                }
            }
        },
        "main.Envelope": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/main.TokenResponse"
                }
            }
        },
        "main.RefreshPayload": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "main.RegisterUserPayload": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password",
                "phone"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 100
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 100
                },
                "password": {
                    "type": "string",
                    "maxLength": 72,
                    "minLength": 3
                },
                "phone": {
                    "type": "string"
                }
            }
        },
        "main.TokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "main.UserWithToken": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/store.User"
                }
            }
        },
        "store.Game": {
            "type": "object",
            "properties": {
                "admin_id": {
                    "description": "Foreign key to users table (game admin)",
                    "type": "integer"
                },
                "created_at": {
                    "description": "Timestamp when the game was created",
                    "type": "string"
                },
                "end_time": {
                    "description": "Game end time",
                    "type": "string"
                },
                "format": {
                    "description": "Game format (nullable)",
                    "type": "string"
                },
                "game_level": {
                    "description": "Skill level (beginner, intermediate, advanced)",
                    "type": "string"
                },
                "id": {
                    "description": "Primary key",
                    "type": "integer"
                },
                "instruction": {
                    "description": "Game instructions (nullable)",
                    "type": "string"
                },
                "is_booked": {
                    "description": "Whether the game is booked",
                    "type": "boolean"
                },
                "match_full": {
                    "description": "Whether the game is full",
                    "type": "boolean"
                },
                "max_players": {
                    "description": "Maximum number of players",
                    "type": "integer"
                },
                "price": {
                    "description": "Price of the game (nullable)",
                    "type": "integer"
                },
                "sport_type": {
                    "description": "Type of sport (e.g., futsal, basketball)",
                    "type": "string"
                },
                "start_time": {
                    "description": "Game start time",
                    "type": "string"
                },
                "status": {
                    "description": "Game status (active, cancelled, completed)",
                    "type": "string"
                },
                "updated_at": {
                    "description": "Timestamp when the game was last updated",
                    "type": "string"
                },
                "venue_id": {
                    "description": "Foreign key to venues table",
                    "type": "integer"
                },
                "visibility": {
                    "description": "Visibility (public or private)",
                    "type": "string"
                }
            }
        },
        "store.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_active": {
                    "type": "boolean"
                },
                "last_name": {
                    "type": "string"
                },
                "no_of_games": {
                    "type": "integer"
                },
                "profile_picture_url": {
                    "type": "string"
                },
                "skill_level": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Khel API",
	Description:      "API for Khel, a complete sport application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
