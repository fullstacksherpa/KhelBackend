basePath: /v1
definitions:
  main.AppReviewPayload:
    properties:
      feedback:
        type: string
      rating:
        type: integer
    type: object
  main.BookVenuePayload:
    properties:
      end_time:
        type: string
      start_time:
        type: string
    required:
    - end_time
    - start_time
    type: object
  main.CreateGamePayload:
    properties:
      end_time:
        type: string
      format:
        maxLength: 20
        type: string
      game_level:
        enum:
        - beginner
        - intermediate
        - advanced
        type: string
      instruction:
        maxLength: 500
        type: string
      max_players:
        minimum: 1
        type: integer
      price:
        minimum: 0
        type: integer
      sport_type:
        enum:
        - futsal
        - basketball
        - badminton
        - e-sport
        - cricket
        - tennis
        type: string
      start_time:
        type: string
      venue_id:
        minimum: 1
        type: integer
      visibility:
        enum:
        - public
        - private
        type: string
    required:
    - end_time
    - max_players
    - sport_type
    - start_time
    - venue_id
    - visibility
    type: object
  main.CreatePricingPayload:
    properties:
      day_of_week:
        enum:
        - sunday
        - monday
        - tuesday
        - wednesday
        - thursday
        - friday
        - saturday
        type: string
      end_time:
        description: format "15:04:05"
        type: string
      price:
        type: integer
      start_time:
        description: format "15:04:05"
        type: string
    required:
    - day_of_week
    - end_time
    - price
    - start_time
    type: object
  main.CreateUserTokenPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  main.Envelope:
    properties:
      data:
        $ref: '#/definitions/main.TokenResponse'
    type: object
  main.HourlySlot:
    properties:
      available:
        type: boolean
      end_time:
        type: string
      price_per_hour:
        type: integer
      start_time:
        type: string
    type: object
  main.PlayerResponse:
    properties:
      first_name:
        type: string
      id:
        type: integer
      phone:
        type: string
      profile_picture_url:
        type: string
      skill_level:
        type: string
    type: object
  main.QuestionPayload:
    properties:
      question:
        maxLength: 120
        type: string
    required:
    - question
    type: object
  main.RefreshPayload:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      first_name:
        maxLength: 50
        type: string
      last_name:
        maxLength: 50
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
      phone:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - phone
    type: object
  main.ReplyPayload:
    properties:
      reply:
        maxLength: 120
        type: string
    required:
    - reply
    type: object
  main.RequestResetPasswordPayload:
    properties:
      email:
        maxLength: 255
        type: string
    required:
    - email
    type: object
  main.ResetPasswordPayload:
    properties:
      password:
        maxLength: 72
        minLength: 3
        type: string
      token:
        type: string
    required:
    - password
    - token
    type: object
  main.TokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user_id:
        type: string
    type: object
  main.UpdatePricingPayload:
    properties:
      day_of_week:
        type: string
      end_time:
        description: Format "15:04:05"
        type: string
      price:
        type: integer
      start_time:
        description: Format "15:04:05"
        type: string
    type: object
  main.UserWithToken:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/store.User'
    type: object
  main.VenueDetailResponse:
    properties:
      address:
        type: string
      amenities:
        items:
          type: string
        type: array
      average_rating:
        type: number
      completed_games:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image_urls:
        items:
          type: string
        type: array
      location:
        description: '[latitude, longitude]'
        items:
          type: number
        type: array
      name:
        type: string
      open_time:
        type: string
      owner_id:
        type: integer
      phone_number:
        type: string
      sport:
        type: string
      total_reviews:
        type: integer
      upcoming_games:
        type: integer
      updated_at:
        type: string
    type: object
  main.VenueListResponse:
    properties:
      address:
        type: string
      average_rating:
        type: number
      id:
        type: integer
      image_urls:
        items:
          type: string
        type: array
      is_favorite:
        type: boolean
      location:
        description: '[longitude, latitude]'
        items:
          type: number
        type: array
      name:
        type: string
      open_time:
        type: string
      phone_number:
        type: string
      sport:
        type: string
      total_reviews:
        type: integer
    type: object
  main.createReviewPayload:
    properties:
      comment:
        maxLength: 500
        type: string
      rating:
        maximum: 5
        minimum: 1
        type: integer
    required:
    - comment
    - rating
    type: object
  main.isOwnerResponse:
    properties:
      is_owner:
        type: boolean
      venue_ids:
        items:
          type: integer
        type: array
    type: object
  store.AppReview:
    properties:
      created_at:
        type: string
      feedback:
        type: string
      id:
        type: integer
      rating:
        type: integer
      user_id:
        type: integer
    type: object
  store.Booking:
    properties:
      created_at:
        type: string
      end_time:
        type: string
      id:
        type: integer
      start_time:
        type: string
      status:
        type: string
      total_price:
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
      venue_id:
        type: integer
    type: object
  store.Game:
    properties:
      admin_id:
        description: Foreign key to users table (game admin)
        type: integer
      created_at:
        description: Timestamp when the game was created
        type: string
      end_time:
        description: Game end time
        type: string
      format:
        description: Game format (nullable)
        type: string
      game_level:
        description: Skill level (beginner, intermediate, advanced)
        type: string
      id:
        description: Primary key
        type: integer
      instruction:
        description: Game instructions (nullable)
        type: string
      is_booked:
        description: Whether the game is booked
        type: boolean
      match_full:
        description: Whether the game is full
        type: boolean
      max_players:
        description: Maximum number of players
        type: integer
      price:
        description: Price of the game (nullable)
        type: integer
      sport_type:
        description: Type of sport (e.g., futsal, basketball)
        type: string
      start_time:
        description: Game start time
        type: string
      status:
        description: Game status (active, cancelled, completed)
        type: string
      updated_at:
        description: Timestamp when the game was last updated
        type: string
      venue_id:
        description: Foreign key to venues table
        type: integer
      visibility:
        description: Visibility (public or private)
        type: string
    type: object
  store.GameDetails:
    properties:
      admin_id:
        type: integer
      current_player:
        type: integer
      end_time:
        type: string
      format:
        type: string
      game_admin_name:
        type: string
      game_id:
        type: integer
      game_level:
        type: string
      is_booked:
        type: boolean
      match_full:
        type: boolean
      max_players:
        type: integer
      player_ids:
        description: all joined player user IDs
        items:
          type: integer
        type: array
      player_images:
        items:
          type: string
        type: array
      price:
        type: integer
      requested_player_ids:
        description: pending request user IDs
        items:
          type: integer
        type: array
      sport_type:
        type: string
      start_time:
        type: string
      status:
        type: string
      venue_id:
        type: integer
      venue_lat:
        type: number
      venue_lon:
        type: number
      venue_name:
        type: string
    type: object
  store.GameRequestStatus:
    enum:
    - pending
    - accepted
    - rejected
    type: string
    x-enum-varnames:
    - GameRequestStatusPending
    - GameRequestStatusAccepted
    - GameRequestStatusRejected
  store.GameRequestWithUser:
    properties:
      first_name:
        type: string
      game_id:
        type: integer
      id:
        type: integer
      phone:
        type: string
      profile_picture_url:
        type: string
      request_time:
        type: string
      skill_level:
        type: string
      status:
        $ref: '#/definitions/store.GameRequestStatus'
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  store.GameSummary:
    properties:
      current_player:
        type: integer
      end_time:
        type: string
      format:
        type: string
      game_admin_name:
        type: string
      game_id:
        type: integer
      game_level:
        type: string
      is_booked:
        type: boolean
      match_full:
        type: boolean
      max_players:
        type: integer
      player_images:
        items:
          type: string
        type: array
      price:
        type: integer
      shortlisted:
        type: boolean
      sport_type:
        type: string
      start_time:
        type: string
      status:
        type: string
      venue_id:
        type: integer
      venue_lat:
        description: Venue latitude
        type: number
      venue_lon:
        description: Venue longitude
        type: number
      venue_name:
        type: string
    type: object
  store.PendingBooking:
    properties:
      booking_id:
        type: integer
      end_time:
        type: string
      price:
        type: integer
      requested_at:
        type: string
      start_time:
        type: string
      user_id:
        type: integer
      user_image:
        description: nullable
        type: string
      user_name:
        type: string
      user_number:
        type: string
    type: object
  store.PricingSlot:
    properties:
      dayOfWeek:
        type: string
      endTime:
        type: string
      id:
        type: integer
      price:
        type: integer
      startTime:
        description: |-
          Note: start_time and end_time are stored as TIME in the DB.
          We use time.Time to hold the time part.
        type: string
      venueID:
        type: integer
    type: object
  store.Question:
    properties:
      created_at:
        type: string
      game_id:
        type: integer
      id:
        type: integer
      question:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  store.QuestionWithReplies:
    properties:
      created_at:
        type: string
      id:
        type: integer
      question:
        type: string
      replies:
        items:
          $ref: '#/definitions/store.Reply'
        type: array
    type: object
  store.Reply:
    properties:
      admin_id:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      question_id:
        type: integer
      reply:
        type: string
      updated_at:
        type: string
    type: object
  store.Review:
    properties:
      avatar_url:
        type: string
      comment:
        type: string
      created_at:
        type: string
      id:
        type: integer
      rating:
        description: 1-5
        type: integer
      updated_at:
        type: string
      user_id:
        type: integer
      user_name:
        description: Joined fields
        type: string
      venue_id:
        type: integer
    type: object
  store.ScheduledBooking:
    properties:
      accepted_at:
        type: string
      booking_id:
        type: integer
      end_time:
        type: string
      price:
        type: integer
      start_time:
        type: string
      user_id:
        type: integer
      user_image:
        type: string
      user_name:
        type: string
      user_number:
        type: string
    type: object
  store.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      last_name:
        type: string
      no_of_games:
        type: integer
      profile_picture_url:
        type: string
      skill_level:
        type: string
      updated_at:
        type: string
    type: object
  store.Venue:
    properties:
      address:
        type: string
      amenities:
        description: Array of strings
        items:
          type: string
        type: array
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image_urls:
        description: Array of image URLs
        items:
          type: string
        type: array
      location:
        description: PostGIS point (longitude, latitude)
        items:
          type: number
        type: array
      name:
        type: string
      open_time:
        type: string
      owner_id:
        type: integer
      phone_number:
        type: string
      sport:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for Khel, a complete sport application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Khel API
paths:
  /app-reviews:
    get:
      consumes:
      - application/json
      description: Returns all app reviews from all users.
      produces:
      - application/json
      responses:
        "200":
          description: List of all reviews
          schema:
            items:
              $ref: '#/definitions/store.AppReview'
            type: array
        "401":
          description: unauthorized route
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: List All App Reviews
      tags:
      - App_Reviews
    post:
      consumes:
      - application/json
      description: Allows authenticated users to submit a rating and feedback for
        the app.
      parameters:
      - description: Review payload
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/main.AppReviewPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Review submitted
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Submit App Review
      tags:
      - App_Reviews
  /authentication/refresh:
    post:
      consumes:
      - application/json
      description: Validates the provided refresh token and issues new access and
        refresh tokens.
      parameters:
      - description: Refresh token payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RefreshPayload'
      produces:
      - application/json
      responses:
        "200":
          description: New access and refresh tokens
          schema:
            $ref: '#/definitions/main.Envelope'
        "400":
          description: Bad request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Refresh authentication tokens
      tags:
      - authentication
  /authentication/reset-password:
    patch:
      consumes:
      - application/json
      description: Reset password
      parameters:
      - description: Reset password details
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.ResetPasswordPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Password reset successful
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Reset password
      tags:
      - authentication
    post:
      consumes:
      - application/json
      description: Request password reset
      parameters:
      - description: User email
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RequestResetPasswordPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Reset token sent
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Request password reset
      tags:
      - authentication
  /authentication/token:
    post:
      consumes:
      - application/json
      description: Creates a token for a user after signin or login.
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Token to save at MMKV
          schema:
            $ref: '#/definitions/main.Envelope'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Login to get Token
      tags:
      - authentication
  /authentication/user:
    post:
      consumes:
      - application/json
      description: Registers a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/main.UserWithToken'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Registers a user
      tags:
      - authentication
  /games/{gameID}:
    get:
      consumes:
      - application/json
      description: Returns detailed information for a specific game including venue
        details and player images
      parameters:
      - description: Game ID
        in: path
        name: gameID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.GameDetails'
        "400":
          description: Invalid game ID
          schema: {}
        "404":
          description: Game not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get detailed game information
      tags:
      - Games
  /games/{gameID}/accept:
    post:
      consumes:
      - application/json
      description: Accepts a pending join request for a game by updating the request
        status to accepted and inserting the player into the game. The game ID is
        provided in the URL path and the user ID is provided in the request body.
      parameters:
      - description: Game ID
        in: path
        name: gameID
        required: true
        type: integer
      - description: Payload containing the user ID to accept
        in: body
        name: payload
        required: true
        schema:
          properties:
            user_id:
              type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Message confirming the join request acceptance and player addition
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid game ID, payload error, or request is not in pending
            state
          schema: {}
        "404":
          description: Join request not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Accept a join request for a game
      tags:
      - Games
  /games/{gameID}/assign-assistant/{playerID}:
    post:
      consumes:
      - application/json
      description: Allows a game admin to assign the assistant role to a player for
        a specified game.
      parameters:
      - description: Game ID
        in: path
        name: gameID
        required: true
        type: integer
      - description: Player ID to be assigned as assistant
        in: path
        name: playerID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Assistant role assigned successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid game ID, invalid player ID, or player not found/already
            an assistant
          schema: {}
        "403":
          description: Only game admins can assign assistants
          schema: {}
        "500":
          description: Database error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Assign an assistant role to a player
      tags:
      - Games
  /games/{gameID}/cancel-game:
    patch:
      consumes:
      - application/json
      description: Allows an admin to cancel a game
      parameters:
      - description: Game ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Game cancelled successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request payload
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Game not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Cancel a game
      tags:
      - Games
  /games/{gameID}/players:
    get:
      consumes:
      - application/json
      description: Fetches the list of players participating in a specific game. The
        game ID is provided in the URL path.
      parameters:
      - description: Game ID
        in: path
        name: gameID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of game players
          schema:
            items:
              $ref: '#/definitions/main.PlayerResponse'
            type: array
        "400":
          description: Invalid game ID
          schema: {}
        "404":
          description: Game players not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Retrieve players for a game
      tags:
      - Games
  /games/{gameID}/qa:
    get:
      consumes:
      - application/json
      description: Get all questions with replies for a game
      parameters:
      - description: Game ID
        in: path
        name: gameID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.QuestionWithReplies'
            type: array
        "400":
          description: Bad Request
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get all Q&A for a game
      tags:
      - Questions
  /games/{gameID}/questions:
    get:
      consumes:
      - application/json
      description: Get all questions for a game
      parameters:
      - description: Game ID
        in: path
        name: gameID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/store.Question'
            type: array
        "400":
          description: Bad Request
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get game questions
      tags:
      - Questions
    post:
      consumes:
      - application/json
      description: Create a new question for a game
      parameters:
      - description: Game ID
        in: path
        name: gameID
        required: true
        type: integer
      - description: Question payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.QuestionPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Question'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a game question
      tags:
      - Questions
  /games/{gameID}/questions/{questionID}:
    delete:
      consumes:
      - application/json
      description: Delete a question (only by author)
      parameters:
      - description: Game ID
        in: path
        name: gameID
        required: true
        type: integer
      - description: Question ID
        in: path
        name: questionID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete a question
      tags:
      - Questions
  /games/{gameID}/questions/{questionID}/replies:
    post:
      consumes:
      - application/json
      description: Create a reply to a question (admin only)
      parameters:
      - description: Game ID
        in: path
        name: gameID
        required: true
        type: integer
      - description: Question ID
        in: path
        name: questionID
        required: true
        type: integer
      - description: Reply payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.ReplyPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/store.Reply'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a reply
      tags:
      - Questions
  /games/{gameID}/reject:
    post:
      consumes:
      - application/json
      description: Rejects a pending join request for a game. The game ID is specified
        in the URL path and the user ID is provided in the request body.
      parameters:
      - description: Game ID
        in: path
        name: gameID
        required: true
        type: integer
      - description: Payload containing the user ID of the join request to reject
        in: body
        name: payload
        required: true
        schema:
          properties:
            user_id:
              type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Message confirming the join request was rejected
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid game ID, payload error, or request is not pending
          schema: {}
        "404":
          description: Join request not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Reject a join request for a game
      tags:
      - Games
  /games/{gameID}/request:
    post:
      consumes:
      - application/json
      description: Allows a user to send a request to join a specific game. The game
        ID is provided in the URL path.
      parameters:
      - description: Game ID
        in: path
        name: gameID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Join request submitted for approval
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid game ID
          schema: {}
        "404":
          description: Game not found or inactive
          schema: {}
        "409":
          description: Join request already sent
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Send a request to join a game
      tags:
      - Games
  /games/{gameID}/requests:
    get:
      consumes:
      - application/json
      description: Retrieve all join requests for a specific game by game ID, including
        user details.
      parameters:
      - description: Game ID
        in: path
        name: gameID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of join requests with user details
          schema:
            items:
              $ref: '#/definitions/store.GameRequestWithUser'
            type: array
        "400":
          description: Invalid game ID
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get all join requests for a game
      tags:
      - Games
  /games/{gameID}/shortlist:
    delete:
      consumes:
      - application/json
      description: Allows authenticated users to remove a game from their shortlist.
      parameters:
      - description: Game ID
        in: path
        name: gameID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Game removed from shortlist
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Bad Request: Invalid game ID or unauthenticated request'
          schema: {}
        "500":
          description: 'Internal Server Error: Could not remove shortlist'
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Remove a game from shortlist
      tags:
      - Shortlist_Games
    post:
      consumes:
      - application/json
      description: Allows authenticated users to add a game to their shortlist.
      parameters:
      - description: Game ID
        in: path
        name: gameID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Game added to shortlist
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Bad Request: Invalid game ID or unauthenticated request'
          schema: {}
        "500":
          description: 'Internal Server Error: Could not add shortlist'
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Add a game to shortlist
      tags:
      - Shortlist_Games
  /games/{id}/toggle-match-full:
    patch:
      consumes:
      - application/json
      description: Allows an admin to toggle match full status
      parameters:
      - description: Game ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Match full status updated
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request payload
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Game not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Toggle match full status
      tags:
      - Games
  /games/{venueID}/upcoming:
    get:
      consumes:
      - application/json
      description: Returns a list of upcoming active games for the specified venue.
      parameters:
      - description: Venue ID
        in: path
        name: venueID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of upcoming active games
          schema:
            items:
              $ref: '#/definitions/store.GameSummary'
            type: array
        "400":
          description: 'Bad Request: Missing or invalid venueID'
          schema: {}
        "500":
          description: 'Internal Server Error: Could not retrieve upcoming games'
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Retrieve upcoming active games at a venue
      tags:
      - Games
  /games/create:
    post:
      consumes:
      - application/json
      description: Create a new game with details such as sport type, venue, start
        time, and end time.
      parameters:
      - description: Game details payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateGamePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Game created successfully
          schema:
            $ref: '#/definitions/store.Game'
        "400":
          description: Invalid request payload
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "409":
          description: Game overlaps with existing game
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a new game
      tags:
      - Games
  /games/get-games:
    get:
      consumes:
      - application/json
      description: Returns a list of games based on filters such as sport type, game
        level, venue, booking status, location, time range, and status.
      parameters:
      - description: Sport type to filter games (e.g., basketball)
        in: query
        name: sport_type
        type: string
      - description: Game level (e.g., intermediate)
        in: query
        name: game_level
        type: string
      - description: Venue ID to filter games
        in: query
        name: venue_id
        type: integer
      - description: Filter games based on booking status
        in: query
        name: is_booked
        type: boolean
      - description: 'Game status: active, cancelled, completed'
        in: query
        name: status
        type: string
      - description: User latitude for location filtering
        in: query
        name: lat
        type: number
      - description: User longitude for location filtering
        in: query
        name: lon
        type: number
      - description: Radius in kilometers for location-based filtering (0 for no filter)
        in: query
        name: radius
        type: integer
      - description: Filter games starting after this time (RFC3339 format)
        in: query
        name: start_after
        type: string
      - description: Filter games ending before this time (RFC3339 format)
        in: query
        name: end_before
        type: string
      - description: Minimum price
        in: query
        name: min_price
        type: integer
      - description: Maximum price
        in: query
        name: max_price
        type: integer
      - description: Maximum number of results to return
        in: query
        name: limit
        type: integer
      - description: Pagination offset
        in: query
        name: offset
        type: integer
      - description: Sort order, either 'asc' or 'desc'
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of games and GeoJSON features
          schema:
            items:
              $ref: '#/definitions/store.GameSummary'
            type: array
        "400":
          description: Invalid request parameters
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Retrieve a list of games
      tags:
      - Games
  /games/shortlist:
    get:
      consumes:
      - application/json
      description: Returns a list of games that the authenticated user has shortlisted.
      produces:
      - application/json
      responses:
        "200":
          description: List of shortlisted games
          schema:
            items:
              $ref: '#/definitions/store.Game'
            type: array
        "400":
          description: 'Bad Request: Unauthenticated request'
          schema: {}
        "500":
          description: 'Internal Server Error: Could not retrieve shortlist'
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Retrieve shortlisted games for the authenticated user
      tags:
      - Shortlist_Games
  /health:
    get:
      description: Healthcheck endpoint
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Healthcheckk
      tags:
      - ops
  /users:
    put:
      consumes:
      - application/json
      description: Update user information such as first name, last name, skill level,
        and phone number
      parameters:
      - description: 'Request body containing fields to update: first_name, last_name,
          skill_level, phone'
        in: body
        name: body
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "204":
          description: User info updated successfully
          schema:
            type: string
        "400":
          description: Bad request, update values can't be nil
          schema: {}
        "404":
          description: User not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update user information
      tags:
      - users
  /users/{userID}/follow:
    put:
      consumes:
      - application/json
      description: Follows a user by ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User followed
          schema:
            type: string
        "400":
          description: User payload missing
          schema: {}
        "404":
          description: User not found
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Follows a user
      tags:
      - users
  /users/{userID}/unfollow:
    put:
      consumes:
      - application/json
      description: Unfollow a user by ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User unfollowed
          schema:
            type: string
        "400":
          description: User payload missing
          schema: {}
        "404":
          description: User not found
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Unfollow a user
      tags:
      - users
  /users/activate/{token}:
    put:
      consumes:
      - application/json
      description: Activate a user account using an activation token provided in the
        URL
      parameters:
      - description: Activation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated
          schema:
            type: string
        "404":
          description: User not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Activate user account
      tags:
      - authentication
  /users/logout:
    post:
      consumes:
      - application/json
      description: logout user which will nullify refresh token
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: logout user
      tags:
      - authentication
  /users/profile-picture:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a user's profile picture and saves the URL in the database
      parameters:
      - description: Profile picture file size limit is 2MB
        in: formData
        name: profile_picture
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: 'Profile picture uploaded successfully: <URL>'
          schema:
            type: string
        "400":
          description: Unable to parse form or retrieve file
          schema: {}
        "500":
          description: Failed to upload image to Cloudinary or save URL in database
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Upload profile picture
      tags:
      - users
    put:
      consumes:
      - multipart/form-data
      description: Updates a user's profile picture, saves the new URL in the database,
        and deletes the old one from Cloudinary
      parameters:
      - description: 'Profile picture file (max size: 2MB)'
        in: formData
        name: profile_picture
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: 'Profile picture updated successfully: <URL>'
          schema:
            type: string
        "400":
          description: Unable to parse form or retrieve file
          schema: {}
        "500":
          description: Failed to upload image to Cloudinary, update database, or delete
            old image
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update profile picture
      tags:
      - users
  /venue/{id}:
    get:
      description: Retrieve detailed information for a venue including aggregated
        review and game statistics.
      parameters:
      - description: Venue ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successful response with venue details
          schema:
            $ref: '#/definitions/main.VenueDetailResponse'
        "400":
          description: 'Bad Request: Invalid venue id'
          schema: {}
        "404":
          description: 'Not Found: Venue not found'
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get venue details
      tags:
      - Venue
  /venues:
    post:
      consumes:
      - multipart/form-data
      description: Register a new venue with details such as name, address, location,
        and amenities.
      parameters:
      - description: Venue details (JSON string)
        in: formData
        name: venue
        required: true
        type: string
      - collectionFormat: csv
        description: Venue images (up to 7 files)
        in: formData
        items:
          type: file
        name: images
        type: array
      produces:
      - application/json
      responses:
        "201":
          description: Venue created successfully
          schema:
            $ref: '#/definitions/store.Venue'
        "400":
          description: Invalid request payload
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Register a venue in our system
      tags:
      - Venue-Owner
  /venues/{venueID}:
    patch:
      consumes:
      - application/json
      description: Allows venue owners to update partial information about their venue.
      parameters:
      - description: Venue ID
        in: path
        name: venueID
        required: true
        type: integer
      - description: Venue update payload
        in: body
        name: updateData
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Venue updated successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Bad Request: Invalid input'
          schema: {}
        "500":
          description: 'Internal Server Error: Could not update venue'
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update venue information
      tags:
      - Venue-Owner
  /venues/{venueID}/available-times:
    get:
      consumes:
      - application/json
      description: Returns one-hour buckets (with availability) for a given venue/day.
      parameters:
      - description: Venue ID
        in: path
        name: venueID
        required: true
        type: integer
      - description: Date in YYYY-MM-DD format
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Hourly availability
          schema:
            items:
              $ref: '#/definitions/main.HourlySlot'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: List available time slots for a venue
      tags:
      - Venue
  /venues/{venueID}/bookings:
    post:
      consumes:
      - application/json
      description: Books a venue for the specified time slot if available and calculates
        the total price based on the applicable pricing slot.
      parameters:
      - description: Venue ID
        in: path
        name: venueID
        required: true
        type: integer
      - description: Booking details payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.BookVenuePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Booking created successfully
          schema:
            $ref: '#/definitions/store.Booking'
        "400":
          description: 'Bad Request: Invalid input'
          schema: {}
        "409":
          description: 'Conflict: Time slot is already booked'
          schema: {}
        "500":
          description: 'Internal Server Error: Could not create booking'
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Book a venue time slot
      tags:
      - Venue
  /venues/{venueID}/favorite:
    delete:
      consumes:
      - application/json
      description: Allows authenticated users to remove a venue from their favorites
        list.
      parameters:
      - description: Venue ID
        in: path
        name: venueID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Venue removed from favorites
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Bad Request: Invalid venue ID or unauthenticated request'
          schema: {}
        "500":
          description: 'Internal Server Error: Could not remove favorite'
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Remove a venue from favorites
      tags:
      - Favorite_Venues
    post:
      consumes:
      - application/json
      description: Allows authenticated users to add a venue to their favorites list.
      parameters:
      - description: Venue ID
        in: path
        name: venueID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Venue added to favorites
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Bad Request: Invalid venue ID or unauthenticated request'
          schema: {}
        "500":
          description: 'Internal Server Error: Could not add favorite'
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Add a venue to favorites
      tags:
      - Favorite_Venues
  /venues/{venueID}/pending-bookings:
    get:
      consumes:
      - application/json
      description: Returns all bookings with status="pending" for a given venue and
        date.
      parameters:
      - description: Venue ID
        in: path
        name: venueID
        required: true
        type: integer
      - description: Date in YYYY-MM-DD format
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Pending bookings
          schema:
            items:
              $ref: '#/definitions/store.PendingBooking'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: List pending booking requests for a venue
      tags:
      - Venue-Owner
  /venues/{venueID}/pending-bookings/{bookingID}/accept:
    post:
      consumes:
      - application/json
      description: Marks the booking with status="pending" as "confirmed".
      parameters:
      - description: Venue ID
        in: path
        name: venueID
        required: true
        type: integer
      - description: Booking ID
        in: path
        name: bookingID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Accept a pending booking request
      tags:
      - Venue-Owner
  /venues/{venueID}/pending-bookings/{bookingID}/reject:
    post:
      consumes:
      - application/json
      description: Marks the booking with status="pending" as "rejected".
      parameters:
      - description: Venue ID
        in: path
        name: venueID
        required: true
        type: integer
      - description: Booking ID
        in: path
        name: bookingID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Reject a pending booking request
      tags:
      - Venue-Owner
  /venues/{venueID}/photos:
    delete:
      consumes:
      - application/json
      description: Deletes a specific venue photo from Cloudinary and removes it from
        the database.
      parameters:
      - description: Venue ID
        in: path
        name: venueID
        required: true
        type: integer
      - description: Photo URL to delete
        in: query
        name: photo_url
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Photo deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Bad Request: Missing venue ID or photo URL'
          schema: {}
        "500":
          description: 'Internal Server Error: Could not delete photo'
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete a venue photo
      tags:
      - Venue-Owner
    post:
      consumes:
      - multipart/form-data
      description: Uploads a new venue photo to Cloudinary and adds the new photo
        URL to the venue record.
      parameters:
      - description: Venue ID
        in: path
        name: venueID
        required: true
        type: integer
      - description: Photo file to upload
        in: formData
        name: photo
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: 'Photo uploaded successfully, returns {\"photo_url\": \"<newPhotoURL>\"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Bad Request: Invalid input or missing file'
          schema: {}
        "500":
          description: 'Internal Server Error: Could not process the upload'
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Upload a new photo for a venue
      tags:
      - Venue-Owner
  /venues/{venueID}/pricing:
    post:
      consumes:
      - application/json
      description: Adds a new day/time price rule to venue_pricing
      parameters:
      - description: Venue ID
        in: path
        name: venueID
        required: true
        type: integer
      - description: New pricing slot
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreatePricingPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Pricing slot created
          schema:
            $ref: '#/definitions/store.PricingSlot'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a new pricing slot for a venue
      tags:
      - Venue-Owner
  /venues/{venueID}/pricing/{pricingID}:
    put:
      consumes:
      - application/json
      description: Allows venue owners to update the pricing information (day, time
        range, and price) for a specific pricing slot.
      parameters:
      - description: Venue ID
        in: path
        name: venueID
        required: true
        type: integer
      - description: Pricing Slot ID
        in: path
        name: pricingID
        required: true
        type: integer
      - description: Pricing update payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.UpdatePricingPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Pricing updated successfully
          schema:
            $ref: '#/definitions/store.PricingSlot'
        "400":
          description: 'Bad Request: Invalid input'
          schema: {}
        "500":
          description: 'Internal Server Error: Could not update pricing'
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Update a pricing slot for a venue
      tags:
      - Venue-Owner
  /venues/{venueID}/reviews:
    get:
      consumes:
      - application/json
      description: Retrieves all reviews for a specific venue along with the total
        count and average rating.
      parameters:
      - description: Venue ID
        in: path
        name: venueID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Reviews, total review count, and average rating
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'Bad Request: Invalid venue ID'
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Retrieve reviews for a venue
      tags:
      - Venue
    post:
      consumes:
      - application/json
      description: Creates a new review for a specific venue. The review includes
        a rating and comment.
      parameters:
      - description: Venue ID
        in: path
        name: venueID
        required: true
        type: integer
      - description: Review payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.createReviewPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Review created successfully
          schema:
            $ref: '#/definitions/store.Review'
        "400":
          description: 'Bad Request: Invalid input'
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a review for a venue
      tags:
      - Venue
  /venues/{venueID}/reviews/{reviewID}:
    delete:
      consumes:
      - application/json
      description: Deletes a review for a venue. This operation is allowed only if
        the requester is the review owner.
      parameters:
      - description: Venue ID
        in: path
        name: venueID
        required: true
        type: integer
      - description: Review ID
        in: path
        name: reviewID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Review deleted successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Bad Request: Invalid review ID'
          schema: {}
        "404":
          description: 'Not Found: Review not found'
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Delete a venue review
      tags:
      - Venue
  /venues/{venueID}/scheduled-bookings:
    get:
      consumes:
      - application/json
      description: Returns all bookings with status="confirmed" for a given venue
        and date.
      parameters:
      - description: Venue ID
        in: path
        name: venueID
        required: true
        type: integer
      - description: Date in YYYY-MM-DD format
        in: query
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Scheduled bookings
          schema:
            items:
              $ref: '#/definitions/store.ScheduledBooking'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: List Scheduled booking requests for a venue
      tags:
      - Venue-Owner
  /venues/favorites:
    get:
      consumes:
      - application/json
      description: Returns a list of venues that the authenticated user has marked
        as favorites.
      produces:
      - application/json
      responses:
        "200":
          description: List of favorite venues
          schema:
            items:
              $ref: '#/definitions/store.Venue'
            type: array
        "400":
          description: 'Bad Request: Unauthenticated request'
          schema: {}
        "500":
          description: 'Internal Server Error: Could not retrieve favorites'
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Retrieve user's favorite venues
      tags:
      - Favorite_Venues
  /venues/is-venue-owner:
    get:
      description: Determines whether the authenticated user owns at least one venue
      produces:
      - application/json
      responses:
        "200":
          description: Ownership check result
          schema:
            $ref: '#/definitions/main.isOwnerResponse'
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Check if user is a venue owner
      tags:
      - Venue-Owner
  /venues/list-venues:
    get:
      consumes:
      - application/json
      description: Get paginated list of venues with filters
      parameters:
      - description: Filter by sport type
        in: query
        name: sport
        type: string
      - description: Latitude for location filter
        in: query
        name: lat
        type: number
      - description: Longitude for location filter
        in: query
        name: lng
        type: number
      - description: Distance in meters from location
        in: query
        name: distance
        type: number
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 7
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.VenueListResponse'
            type: array
      security:
      - ApiKeyAuth: []
      summary: List venues
      tags:
      - Venue
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
