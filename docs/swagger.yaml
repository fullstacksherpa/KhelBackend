basePath: /v1
definitions:
  main.CreateGamePayload:
    properties:
      end_time:
        type: string
      format:
        maxLength: 20
        type: string
      game_level:
        enum:
        - beginner
        - intermediate
        - advanced
        type: string
      instruction:
        maxLength: 500
        type: string
      max_players:
        minimum: 1
        type: integer
      price:
        minimum: 0
        type: integer
      sport_type:
        enum:
        - futsal
        - basketball
        - badminton
        - e-sport
        - cricket
        - tennis
        type: string
      start_time:
        type: string
      venue_id:
        minimum: 1
        type: integer
      visibility:
        enum:
        - public
        - private
        type: string
    required:
    - end_time
    - max_players
    - sport_type
    - start_time
    - venue_id
    - visibility
    type: object
  main.CreateUserTokenPayload:
    properties:
      email:
        maxLength: 255
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  main.Envelope:
    properties:
      data:
        $ref: '#/definitions/main.TokenResponse'
    type: object
  main.RefreshPayload:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        maxLength: 255
        type: string
      first_name:
        maxLength: 100
        type: string
      last_name:
        maxLength: 100
        type: string
      password:
        maxLength: 72
        minLength: 3
        type: string
      phone:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - phone
    type: object
  main.TokenResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  main.UserWithToken:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/store.User'
    type: object
  store.Game:
    properties:
      admin_id:
        description: Foreign key to users table (game admin)
        type: integer
      created_at:
        description: Timestamp when the game was created
        type: string
      end_time:
        description: Game end time
        type: string
      format:
        description: Game format (nullable)
        type: string
      game_level:
        description: Skill level (beginner, intermediate, advanced)
        type: string
      id:
        description: Primary key
        type: integer
      instruction:
        description: Game instructions (nullable)
        type: string
      is_booked:
        description: Whether the game is booked
        type: boolean
      match_full:
        description: Whether the game is full
        type: boolean
      max_players:
        description: Maximum number of players
        type: integer
      price:
        description: Price of the game (nullable)
        type: integer
      sport_type:
        description: Type of sport (e.g., futsal, basketball)
        type: string
      start_time:
        description: Game start time
        type: string
      status:
        description: Game status (active, cancelled, completed)
        type: string
      updated_at:
        description: Timestamp when the game was last updated
        type: string
      venue_id:
        description: Foreign key to venues table
        type: integer
      visibility:
        description: Visibility (public or private)
        type: string
    type: object
  store.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      last_name:
        type: string
      no_of_games:
        type: integer
      profile_picture_url:
        type: string
      skill_level:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for Khel, a complete sport application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Khel API
paths:
  /authentication/refresh:
    post:
      consumes:
      - application/json
      description: Validates the provided refresh token and issues new access and
        refresh tokens.
      parameters:
      - description: Refresh token payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RefreshPayload'
      produces:
      - application/json
      responses:
        "200":
          description: New access and refresh tokens
          schema:
            $ref: '#/definitions/main.Envelope'
        "400":
          description: Bad request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Refresh authentication tokens
      tags:
      - authentication
  /authentication/token:
    post:
      consumes:
      - application/json
      description: Creates a token for a user after signin or login.
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateUserTokenPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Token to save at MMKV
          schema:
            $ref: '#/definitions/main.Envelope'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Creates a token
      tags:
      - authentication
  /authentication/user:
    post:
      consumes:
      - application/json
      description: Registers a user
      parameters:
      - description: User credentials
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/main.UserWithToken'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Registers a user
      tags:
      - authentication
  /games:
    post:
      consumes:
      - application/json
      description: Create a new game with details such as sport type, venue, start
        time, and end time.
      parameters:
      - description: Game details payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/main.CreateGamePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Game created successfully
          schema:
            $ref: '#/definitions/store.Game'
        "400":
          description: Invalid request payload
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "409":
          description: Game overlaps with existing game
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Create a new game
      tags:
      - Games
  /health:
    get:
      description: Healthcheck endpoint
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            type: string
      summary: Healthcheckk
      tags:
      - ops
  /users:
    put:
      consumes:
      - application/json
      description: Update user information such as first name, last name, skill level,
        and phone number
      parameters:
      - description: "Field name should be \tfirst_name,  last_name, skill_level,
          phone whichever who want to update"
        in: body
        name: body
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "204":
          description: User info updated successfully
          schema:
            type: string
        "400":
          description: Bad request, update values can't be nil
          schema: {}
        "404":
          description: User not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Update user information
      tags:
      - users
  /users/{userID}/follow:
    put:
      consumes:
      - application/json
      description: Follows a user by ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User followed
          schema:
            type: string
        "400":
          description: User payload missing
          schema: {}
        "404":
          description: User not found
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Follows a user
      tags:
      - users
  /users/{userID}/unfollow:
    put:
      consumes:
      - application/json
      description: Unfollow a user by ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: User unfollowed
          schema:
            type: string
        "400":
          description: User payload missing
          schema: {}
        "404":
          description: User not found
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Unfollow a user
      tags:
      - users
  /users/activate/{token}:
    put:
      consumes:
      - application/json
      description: Activate a user account using an activation token provided in the
        URL
      parameters:
      - description: Activation token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User activated
          schema:
            type: string
        "404":
          description: User not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Activate user account
      tags:
      - authentication
  /users/logout:
    post:
      consumes:
      - application/json
      description: logout user which will nullify refresh token
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "500":
          description: Internal server error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: logout user
      tags:
      - authentication
  /users/profile-picture:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a user's profile picture and saves the URL in the database
      parameters:
      - description: Profile picture file size limit is 2MB
        in: formData
        name: profile_picture
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: 'Profile picture uploaded successfully: <URL>'
          schema:
            type: string
        "400":
          description: Unable to parse form or retrieve file
          schema: {}
        "500":
          description: Failed to upload image to Cloudinary or save URL in database
          schema: {}
      summary: Upload profile picture
      tags:
      - users
    put:
      consumes:
      - multipart/form-data
      description: Updates a user's profile picture, saves the new URL in the database,
        and deletes the old one from Cloudinary
      parameters:
      - description: 'Profile picture file (max size: 2MB)'
        in: formData
        name: profile_picture
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: 'Profile picture updated successfully: <URL>'
          schema:
            type: string
        "400":
          description: Unable to parse form or retrieve file
          schema: {}
        "500":
          description: Failed to upload image to Cloudinary, update database, or delete
            old image
          schema: {}
      summary: Update profile picture
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
